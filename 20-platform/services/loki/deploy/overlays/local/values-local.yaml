loki:
  # -- Configuration for running Loki
  loki:
    # Should authentication be enabled
    auth_enabled: false # TODO: enable it

    # -- Limits config
    limits_config:
      ingestion_rate_mb: 500  # 500MB
      ingestion_burst_size_mb: 1000  # 1000MB
      per_stream_rate_limit: 500MB # 500MB
      per_stream_rate_limit_burst: 1000MB # 1000MB
      allow_structured_metadata: true
      reject_old_samples: false
      reject_old_samples_max_age: 1d
      max_cache_freshness_per_query: 20m
      split_queries_by_interval: 30m
      query_timeout: 300s
      volume_enabled: true

    # -- Storage config. Providing this will automatically populate all necessary storage configs in the templated config.
    storage:
      s3:
        secretAccessKey: grafana-loki
        accessKeyId: supersecretpassword
        insecure: true

    # -- Additional storage config
    storage_config:
      aws:
        # NOTE: This is the s3 url for the loki service
        s3: s3://grafana-loki:supersecretpassword@loki-minio.loki:9000
        bucketnames: chunks,ruler,admin

    # -- Enable tracing
    tracing:
      enabled: true
    # -- Structured loki configuration, takes precedence over `loki.config`, `loki.schemaConfig`, `loki.storageConfig`
    structuredConfig: {}
    # -- Additional query scheduler config
    query_scheduler: {}
    # --  Optional compactor configuration
    compactor: {}
    # --  Optional pattern ingester configuration
    pattern_ingester:
      enabled: false
    # --  Optional analytics configuration
    analytics: {}
    # --  Optional querier configuration
    query_range: {}
    # --  Optional querier configuration
    querier: {}
    # --  Optional ingester configuration
    ingester: {}
    # --  Optional index gateway configuration
    index_gateway:
      mode: simple
    # -- Optional distributor configuration
    distributor: {}

  # Configuration for the write pod(s)
  write:
    replicas: 0

    # resources:
    #   requests:
    #     cpu: "100m"
    #     memory: "512Mi"
    #   limits:
    #     cpu: "500m"
    #     memory: "512Mi"

    autoscaling:
      enabled: false
      minReplicas: 3
      maxReplicas: 4
      targetCPUUtilizationPercentage: 80
      targetMemoryUtilizationPercentage: 80
      behavior:
        scaleUp:
          policies:
            - type: Pods
              value: 1
              periodSeconds: 900
        scaleDown:
          policies:
            - type: Pods
              value: 1
              periodSeconds: 1800
          stabilizationWindowSeconds: 3600


    persistence:
      volumeClaimsEnabled: false
      size: 50Gi
      storageClassName: "gp3"

  read:
    replicas: 0

    autoscaling:
      enabled: false
      minReplicas: 2
      maxReplicas: 3
      targetCPUUtilizationPercentage: 60
      targetMemoryUtilizationPercentage: 80

    # resources:
    #   requests:
    #     cpu: "100m"
    #     memory: "256Mi"
    #   limits:
    #     cpu: "200m"
    #     memory: "256Mi"

  backend:
    replicas: 0

    autoscaling:
      enabled: false
      minReplicas: 1
      maxReplicas: 2
      targetCPUUtilizationPercentage: 60
      targetMemoryUtilizationPercentage: 80

    # resources:
    #   requests:
    #     cpu: "100m"
    #     memory: "256Mi"
    #   limits:
    #     cpu: "200m"
    #     memory: "256Mi"

  # -- Configuration for the minio subchart
  minio:
    replicas: 1
    # For single-node Kind cluster, we can use a single drive
    drivesPerNode: 1
    # Set mode to standalone since we're using a single replica
    mode: standalone
    # root user; not used for GEL authentication
    # NOTE: This is the root user for the minio service
    rootUser: root-user
    # NOTE: This is the root password for the minio service
    rootPassword: supersecretpassword
    users: 
      # NOTE: This is the user for the logs service
      - accessKey: logs-user
        secretKey: supersecretpassword
        policy: readwrite

    persistence:
      enabled: false
      size: 100Gi
      storageClassName: "gp3"

    # resources:
    #   requests:
    #     cpu: 250m
    #     memory: 4Gi
    #   limits:
    #     cpu: 500m
    #     memory: 4Gi
      
  chunksCache:
    # -- Specifies whether memcached based chunks-cache should be enabled
    enabled: true
    # -- Batchsize for sending and receiving chunks from chunks cache
    batchSize: 4
    # -- Parallel threads for sending and receiving chunks from chunks cache
    parallelism: 5
    # -- Memcached operation timeout
    timeout: 2000ms
    # -- Specify how long cached chunks should be stored in the chunks-cache before being expired
    defaultValidity: 0s
    # -- Total number of chunks-cache replicas
    replicas: 1
    # -- Port of the chunks-cache service
    port: 11211
    # -- Amount of memory allocated to chunks-cache for object storage (in MB).
    allocatedMemory: 128
    # -- Maximum item memory for chunks-cache (in MB).
    maxItemMemory: 5
    # -- Maximum number of connections allowed
    connectionLimit: 100
    # -- Max memory to use for cache write back
    writebackSizeLimit: 50MB
    # -- Max number of objects to use for cache write back
    writebackBuffer: 500
    # -- Number of parallel threads for cache write back
    writebackParallelism: 1

    # resources:
    #   requests:
    #     cpu: 150m
    #     memory: 2Gi
    #   limits:
    #     cpu: 300m
    #     memory: 2Gi

  resultsCache:
    # -- Specifies whether memcached based results-cache should be enabled
    enabled: true
    # -- Specify how long cached results should be stored in the results-cache before being expired
    defaultValidity: 12h
    # -- Memcached operation timeout
    timeout: 500ms
    # -- Total number of results-cache replicas
    replicas: 1
    # -- Port of the results-cache service
    port: 11211
    # -- Amount of memory allocated to results-cache for object storage (in MB).
    allocatedMemory: 128 # TODO: reduce cpu to 100m
    # -- Maximum item results-cache for memcached (in MB).
    maxItemMemory: 5
    # -- Maximum number of connections allowed
    connectionLimit: 100
    # -- Max memory to use for cache write back
    writebackSizeLimit: 50MB
    # -- Max number of objects to use for cache write back
    writebackBuffer: 500
    # -- Number of parallel threads for cache write back
    writebackParallelism: 1

    # resources:
    #   requests:
    #     cpu: 150m
    #     memory: 2048Mi
    #   limits:
    #     cpu: 300m
    #     memory: 2048Mi

  ruler:
    replicas: 0

    # resources:
    #   requests:
    #     cpu: "100m"
    #     memory: "256Mi"
    #   limits:
    #     cpu: "200m"
    #     memory: "256Mi"

    persistence:
      size: 5Gi
